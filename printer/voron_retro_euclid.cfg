# This cfg contains all the necessary definitions, macros and settings to use the Euclid Probe and the Bedmount attached to the left side of the left bed extrusion.
#
# IÂ´m using this file on a Voron 2.4 250
#
# What it does? 
# It is using the Z-Endstop only to locate the Probedock, the real Z 0-Point is measured afterwards using the Euclid.
#
# The calculation of the Z 0 Point is done by 5 Measurements in the middle of the bed to get a better idea of the "real" height. 
# The result of this is an average out of the 5 Z heights, each of the 5 Points is calculated by using the median out of the samples.
#
#		+++ Point location on the Bed +++
#		---------------------------------
#		|                               |
#		|                               |
#		|             Area X            |
#  		|           ---------           |
#		|           | *4 *3 |           |
#      	|           |   *5  | Area Y    |
#		|           | *1 *2 |           |	
#		|           ---------           |
#		|                               |
#		|                               |
#		|                               |
#		---------------------------------
#
# This is done using the following macros:
#		- G3201
#		- _CHECK_PROBE2
#		- _CHECK_PROBE3
#		- _CHECK_PROBE4
#		- _CHECK_PROBE5
#		- _CHECK_PROBE6
#		- _CHECK_PROBE7
#
# There is also a "security mechanism" included to check the distance between Z-Endstop 0-Point and new probed 0-Point.
# If this distance is larger than the defined ZprobeAbortTolerance, the new Value will not be applied, and you will have to check your Probe / Nozzle or adapt your "variable_euclidZCompensation:"
#
#
# +++++++++++++++++++ The macros where all done by @rkolbi, I(@k2dp2k) only adapted them to make it work in a simple way on a Voron 2.4 +++++++++++++++++++
#
#
# You need to disable the following sections in your existing printer.cfg
#
# [probe]
# [quad_gantry_level]
# [bed_mesh]
# [safe_z_home]
#
# Insert [include ./voron_retro_euclid.cfg] to your printer.cfg file
#
# Inside this config file you need to adapt the marked lines to your setup (<-----------)
#
[gcode_macro configvars]
#------------------------------------------------- Needed Values -------------------------------------------------- 
variable_euclidX: 27                    # X Position directly over probe						<-----------
variable_euclidY:303.5                  # Y Position directly over probe						<-----------
variable_euclidSwipeX: 60              # X Position, swipe to the side to free probe of dock			<-----------
variable_euclidSafeDeployZ: 25         # Z Safe height for deployment approach					<-----------
variable_euclidSafeStowZ: 30           # Z Safe height following stowing the probe (break mag pull)		<-----------
variable_euclidDeployZ: 5             # Lower to just above probe, no physical contact				<-----------
variable_euclidStowZ: 0.0              # Lower to exact postion for dock entry/exit				<-----------
variable_defaultWarmNozzle: 160        #to get the biggest part of nozzle expansion compensated without oozing	<-----------

#------------------------------------------------ Z Compensation ------------------------------------------------- 
variable_euclidZCompensation: 8.92    # Z0 Compensation based off probe height		Finetune this using the "Papertest and an additional First layer print"<-----------
variable_ZprobeSpeed: 3.0			   # Probing speed for Z Measurements  <-----------
variable_ZprobeSamples: 5	           # Samples probed per Z Point as the point is calculated out of median keep this number odd e.g. 3,5,7... <-----------
variable_ZprobeTolerance: 0.020		   # Sample Tolerance per Z Point <-----------
variable_ZprobeAbortTolerance: 1.0	   # Tolerance to apply the Measured Z-0 Point or throw an error to check things <-----------
variable_ZprobeRetract: 1.2            # Retract from each probing for a D2F-5 Switch 1.2 should be good  <-----------

#******************* Probing Area the entered Values should end up in a Square eg. X=25 Y=25 I usually go for 10% of the Bed Size*************
variable_ProbeBoundingBox: 25          # Bounding box size to take probe samples, this is used for X & Y.  <-----------
variable_DoApplyMesh: True             # Apply mesh prior to probe sampling.  <-----------
variable_MeshToApply: "105"        # The Mesh name to apply, mesh name must enclosed with ""					<-----------

# You also need to adapt your PRINT_START Macro, see marced Lines
#[gcode_macro PRINT_START]
#gcode: 
#    {% set bedtemp = params.BED|int %}
#    {% set hotendtemp = params.HOTEND|int %}
#    {% set chambertemp = params.CHAMBER|default(0)|int %}
#    {% set defaultWN = printer["gcode_macro configvars"].defaultwarmnozzle|int %}				<-----------
#    BED_MESH_CLEAR
#    SET_GCODE_OFFSET Z=0.0
#    G28
#    PARKCENTER                        
#    M104 S{defaultWN}  											<-----------
#    M190 S{bedtemp}                                                       
#    TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber" MINIMUM={chambertemp}   
#    G3201    													<-----------
#    PARKCENTER
#    M109 S{hotendtemp} 
#    G1 X55 Y2 Z0.85 F12000;
#    G1 X85 Y2 E20 F100;
#    G1 X90 F18000;

gcode:

[force_move]
enable_force_move: true

[respond]
default_type: echo

[probe]
pin: ^PG15
x_offset:  0  # 												<-----------
y_offset:  25 # 												<-----------
z_offset:  10.15 # 												<-----------
speed: 4.0
lift_speed: 10.0
samples: 5
samples_result: median
sample_retract_dist: 1.5
samples_tolerance: 0.0075
samples_tolerance_retries: 5

[quad_gantry_level]
gantry_corners:
   -60,-10
	360,370
points:
	50,25
	50,225
	250,225
	250,25
speed: 200
horizontal_move_z: 15
retries: 5
retry_tolerance: 0.0075
max_adjust: 10

[bed_mesh]
speed: 300
horizontal_move_z: 14
mesh_min: 40, 40
mesh_max: 260,260
fade_start: 0.6
fade_end: 10.0
probe_count: 5,5
algorithm: bicubic
relative_reference_index: 12
move_check_distance: 3
split_delta_z: 0.0125
mesh_pps: 2,2

[safe_z_home]
home_xy_position:207,299.5  # <-------------------------------Z-Endstop Position	
speed:100
z_hop:15

[delayed_gcode prerun]
initial_duration: 1
gcode:
    QUERY_PROBE
    M117 Printer online.

# M401 - Deploy Euclid Probe
[gcode_macro M401]
gcode:
    QUERY_PROBE
    {% if printer.probe.last_query %}
        M118 Fetching Euclid Probe.
        G28 Z
        _PROBE_DEPLOY
    {% else %}
        M118 ?!Probe is already attached.
    {% endif %}

# M402 - Stow Euclid Probe
[gcode_macro M402]
gcode:
    QUERY_PROBE
    {% if not printer.probe.last_query %}
        M118 Stowing Euclid Probe.
        G28 Z
        _PROBE_STOW
    {% else %}
        M118 ?!Probe is not attached.
    {% endif %}

# Euclid Probe Safety Checks

#.................................................................................................................
[gcode_macro _do_error_if_probe_deployed]
gcode:
    {% if not printer.probe.last_query %}
        {action_raise_error("ERROR: probe still deployed - remove and return to dock.")}
    {% else %}
        M118 Euclid Probe has been stowed.  
    {% endif %}
	
#.................................................................................................................
[gcode_macro _error_if_probe_deployed]
gcode:
    G4 P300
    QUERY_PROBE
    _do_error_if_probe_deployed
	
#.................................................................................................................
[gcode_macro _do_error_if_probe_not_deployed]
gcode:
    {% if printer.probe.last_query %}
        {action_raise_error("ERROR: probe unsuccessfully deployed.")}
    {% else %}
        M118 Euclid Probe has been attached.
    {% endif %}
	
#.................................................................................................................
[gcode_macro _error_if_probe_not_deployed]
gcode:
    G4 P300
    QUERY_PROBE
    _do_error_if_probe_not_deployed

#.................................................................................................................
[gcode_macro _PROBE_DEPLOY]
gcode:
    G90
    G0 Z{printer["gcode_macro configvars"].euclidsafedeployz|float} F800
    G0 X{printer["gcode_macro configvars"].euclidx|float} Y{printer["gcode_macro configvars"].euclidy|float} F3500
    G0 Z{printer["gcode_macro configvars"].eucliddeployz|float} F800
    G0 X{printer["gcode_macro configvars"].euclidswipex|float} Y{printer["gcode_macro configvars"].euclidy|float} F3500
    G0 Z{printer["gcode_macro configvars"].euclidsafedeployz|float} F800
    _error_if_probe_not_deployed ; Verify probe attached

#.................................................................................................................
[gcode_macro _PROBE_STOW]
gcode:
    G90
    G0 X{printer["gcode_macro configvars"].euclidswipex|float} Y{printer["gcode_macro configvars"].euclidy|float} F3500
    G0 Z{printer["gcode_macro configvars"].euclidstowz|float} F500
    G0 X{printer["gcode_macro configvars"].euclidx|float} Y{printer["gcode_macro configvars"].euclidy|float} F1000
    G0 Z{printer["gcode_macro configvars"].euclidsafestowz|float} F800
    _error_if_probe_deployed ; Verify probe detached	
	
#.................................................................................................................
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: QUAD_GANTRY_LEVEL_ORIGINIAL
gcode:
    QUERY_PROBE
    M401
    QUAD_GANTRY_LEVEL_ORIGINIAL
    M402

#.................................................................................................................
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_ORIGINIAL
gcode:
    QUERY_PROBE
    M401
    BED_MESH_CALIBRATE_ORIGINIAL
    M402

#.................................................................................................................
[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUERY_PROBE
    {% if printer.probe.last_query %}
        M118 Fetching Euclid Probe.
        _PROBE_DEPLOY
    {% endif %}
    QUAD_GANTRY_LEVEL_ORIGINIAL
    G28
    M118 Stowing Euclid Probe.
    _PROBE_STOW
    QUERY_PROBE



#.................................................................................................................
[gcode_macro G3201]  # This one should be used instead of the normal G32 / QGL in the Print_start macro
gcode:
    {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
    {% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
    {% set defaultWN = printer["gcode_macro configvars"].defaultwarmnozzle|float %}
    {% set ZSpeed = printer["gcode_macro configvars"].zprobesamples|float %}
    {% set ZSamples = printer["gcode_macro configvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro configvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro configvars"].zproberetract|float %}
    {% set ZP_CAL = printer["gcode_macro configvars"].euclidzcompensation|float %}
    {% set ZAX = printer["gcode_macro configvars"].probeboundingbox|float %}
    {% set ZAY = printer["gcode_macro configvars"].probeboundingbox|float %}
    {% set UMesh = printer["gcode_macro configvars"].doapplymesh %}
    {% set defaultMESH = printer["gcode_macro configvars"].meshtoapply %}
     BED_MESH_CLEAR
    M118 Probing Z is done using following Settings:
    M118 Speed: {ZSpeed} mm/s
    M118 Samples: {ZSamples}
    M118 Sample Tolerance: {ZTolerance} mm
    M118 Sample Retract: {ZRetract} mm
    M118 Your Current Z Compensation Value is: {ZP_CAL} mm
    M118 Heating up Nozzle to {defaultWN} C...
    M109 S{defaultWN}
    G4 P1000
    G28
    QUERY_PROBE
    {% if printer.probe.last_query %}
        M118 Fetching Euclid Probe.
        _PROBE_DEPLOY
    {% endif %}
    QUAD_GANTRY_LEVEL_ORIGINIAL
    G28 Z
    {% if UMesh == true %}
      BED_MESH_PROFILE LOAD={defaultMESH}
      M118 Mesh {defaultMESH} activated...       
     {% else %}
        M118 Not applying {MeshToApply} mesh prior to sampling.
    {% endif %}   
    G90
    G0 X{X_MID} Y{Y_MID} F3500
    G91  
    G0 X{((ZAX / 2)*(-1))} Y{((ZAY / 2)*(-1))} F2500
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries=3 sample_retract_dist={ZRetract}
    _CHECK_PROBE2

[gcode_macro _CHECK_PROBE2]
gcode:
    {% set PROBE_PASS = printer.probe.last_z_result %}
    {% set ZSpeed = printer["gcode_macro configvars"].zprobesamples|float %}
    {% set ZSamples = printer["gcode_macro configvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro configvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro configvars"].zproberetract|float %}
    {% set ZAX = printer["gcode_macro configvars"].probeboundingbox|float %}
    G0 Z2 F500
    G0 X{ZAX} F2500
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries=3 sample_retract_dist={ZRetract}
    _CHECK_PROBE3 PASS={PROBE_PASS}

[gcode_macro _CHECK_PROBE3]
gcode:
    {% set PASS = params.PASS|float %}
    {% set PROBE_PASS = printer.probe.last_z_result %}
    {% set ZSpeed = printer["gcode_macro configvars"].zprobesamples|float %}
    {% set ZSamples = printer["gcode_macro configvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro configvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro configvars"].zproberetract|float %}
    {% set ZAY = printer["gcode_macro configvars"].probeboundingbox|float %}
    G0 Z2 F500
    G0 Y{ZAY} F2500
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries=3 sample_retract_dist={ZRetract}
    _CHECK_PROBE4 PASS={PROBE_PASS + PASS}

[gcode_macro _CHECK_PROBE4]
gcode:
    {% set PASS = params.PASS|float %}
    {% set PROBE_PASS = printer.probe.last_z_result %}
    {% set ZSpeed = printer["gcode_macro configvars"].zprobesamples|float %}
    {% set ZSamples = printer["gcode_macro configvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro configvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro configvars"].zproberetract|float %}
    {% set ZAX = printer["gcode_macro configvars"].probeboundingbox|float %}
    G0 Z2 F500
    G0 X{(ZAX*(-1))} F2500
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries=3 sample_retract_dist={ZRetract}
    _CHECK_PROBE5 PASS={PROBE_PASS + PASS}

[gcode_macro _CHECK_PROBE5]
gcode:
    {% set PASS = params.PASS|float %}
    {% set PROBE_PASS = printer.probe.last_z_result %}
    {% set ZSpeed = printer["gcode_macro configvars"].zprobesamples|float %}
    {% set ZSamples = printer["gcode_macro configvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro configvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro configvars"].zproberetract|float %}
    {% set ZAX = printer["gcode_macro configvars"].probeboundingbox|float %}
    {% set ZAY = printer["gcode_macro configvars"].probeboundingbox|float %}
    G0 Z2 F500
    G0 G0 X{(ZAX/2)} Y{((ZAY/2)*(-1))} F2500
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries=3 sample_retract_dist={ZRetract}
    _CHECK_PROBE6 PASS={PROBE_PASS + PASS}

[gcode_macro _CHECK_PROBE6]
gcode:
    {% set PASS = params.PASS|float %}
    {% set PROBE_PASS = printer.probe.last_z_result %}
    {% set ZSpeed = printer["gcode_macro configvars"].zprobesamples|float %}
    {% set ZSamples = printer["gcode_macro configvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro configvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro configvars"].zproberetract|float %}
    G90
    G0 Z25 F3500
    _CHECK_PROBE7 PASS={(PROBE_PASS + PASS)/5}

[gcode_macro _CHECK_PROBE7]
gcode:
    {% set ZP_CAL = printer["gcode_macro configvars"].euclidzcompensation|float %}
    {% set ZAbortTolerance = printer["gcode_macro configvars"].zprobeaborttolerance|float %}
    {% set PASS = params.PASS|float %}
    {% set Z_POS = printer.toolhead.position.z|float %}
    {% set Z_OFFSET = PASS - ZP_CAL|float %}
    {% set NEW_CURRENT_Z = (Z_POS - Z_OFFSET) %}
    M118 Current Average is: {PASS}
    M118 Z-Probe calibration is: {ZP_CAL}
    M118 Z-Difference: {Z_OFFSET}
    {% if Z_OFFSET|abs > ZAbortTolerance %}
        M118 ! ! !  Z-Difference is > 1mm, check nozzle cleanliness and printer  ! ! !
        M118 Not applying probed Z.
      {% else %}
    M118 Setting current Z_Height of {Z_POS} to {NEW_CURRENT_Z}
    SET_KINEMATIC_POSITION Z={NEW_CURRENT_Z}
    G4 P1000
    M118 Moving nozzle to newly adjusted Z25.
    G0 Z25 F3500
    G4 P1000
      {% endif %}
    QUERY_PROBE
    {% if not printer.probe.last_query %}
        M118 Stowing Euclid Probe.
        _PROBE_STOW
    {% else %}
        M118 ?!Probe is not attached.
    {% endif %}
    M118 :-) Ready to Print :-)